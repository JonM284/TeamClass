Reference sheet for all variables and what they do, no matter how redundant. (Except for component variables like rb = rigidbody)
This sheet is sorted by script name
Don't forget, you can quickly search with ctrl+f, but if you do make sure you're checking the.. 
correct script, because more than one script can have the same named variable



HeathAndShield{

		armorRegenSpeed: How fast your armor regenerates, after the armorWaitTime is over

		armorWaitTime: The amount of time (in seconds) that needs to pass without taking damage, before your armor can start to regenerate.

		currentHealth: The current amount of health the player has.

		currentArmor: The current amount of armor the player has.

		isInvinsible: Not INVISIBLE! This variable dictates whether you are invinsible or not. If you're invinsible, you cannot take damage, or receive
					  knockback from enemy attacks. You may want to set this to true for example, If you're getting up from getting knocked down, or maybe
					  invinsibility is just a power up, and so on...

		isInvinsibleTimer: Not sure if we will need this variable, but while this number is positive, set 'isInvinsible' to true, and if its <= 0, set 'isInvinsible' to false

		maxArmor: The maximum amount of armor the character can have at one time.

		maxHealth: The maximum amount of health the character can have at one time.


}



Movement{

		activateJump: This is just a checker so Update() and FixedUpdate() can communicate with each other. When you press the jump button in Update() this get set to true,
					  then in FixedUpdate(), if(activateJump && currentJumps > 0) --> apply jumpForce.

		aerialJumpForce: The upward force added to the player when the jump button is pressed while in the air. Weight will also impact how high you go when you jump.

		aerialThrustForce: How strong the initial speed boost is when you initiate movement, or change direction in the air.

		airSpeed: How fast you can move left and right while in the air.

		canWallCling: If true, the character can temporarily, or permanantly cling to walls (we didnt discuss this yet, so i dont know if we will
					  make wall cling a thing, and if it is a temporary cling.)

		currentJumps: The current amount of jumps you have left.

		downwardGravity: How strong the downward force to the player is WHILE THE PLAYER IS MOVING DOWNWARD. 
	  		     /* The reason why im doing gravity here instead of just using the rigidbody gravity, is because unity physics is some hot garbage
				  * doing it this way will give us more flexibility and options that we can fine tune to make the movement feel real nice
				  * Also, in the event we want to have gravity modifiers due to support character interference, having gravity done this way makes that easier to do
				  * -Ganderman Dan
                  */

		groundedJumpForce: The upward force added to the player when the jump button is pressed while grounded. Weight will also impact how high you go when you jump.

		groundedThrustForce: How strong the initial speed boost is when you initiate movement, or change direction while on the ground.

		haltSpeed: How fast your velocity goes to 0 when you stop moving. The higher the haltSpeed the faster you stop, the lower the number, the more slidey you feel

		hitStun: Is how long you have to wait before you can do something after getting hit, this number is affected directly by the
	             enemies attack, this function should get called when you get hit. While this number is greater than 0, you cannot do anything
				 Refer to the GetHit() function for further explanation 

		horAxisPos: This stores the current joystick position (left and right) so that FixedUpdate() doesnt have to deal with Input stuff

		isTouchingGround: Check if the player is currently touching the ground/platform/not in the air (used mostly for determining whether or not to use walkSpeed or airSpeed)

		maxAirVelocity: The maximum speed at which you can move left and right while in the air.

		maxDownwardVelocity: The maximum speed at which the player can fall. (So that the fall speed doesnt infinitely accelerate)

		maxGroundVelocity: The maximum speed at which you can move left and right while walking.

		maxJumps: The maximum amount of times you can jump before touching the ground again.

		moveLeft: Keeps track of whether or not you're pressing the 'go left' button. This is so that you can get input in update(), and move in fixedUpdate()

		movementMultiplier: This number changes your movement speed. This will be used mostly for environmental movement hazards, etc. When in a normal state, this number should be 1.

		moveRight: Keeps track of whether or not you're pressing the 'go right' button. This is so that you can get input in update(), and move in fixedUpdate()

		onGroundTimer: The amount of time that has past since you last touched the ground. 

		onGroundTimerMax: The max amount of time you'll still be able to jump after leaving a platform

		runTransitionAxis: How far the joystick needs to be pushed before the character transitions from walking to running. This number MUST be between 0 and 1 is you want it
						   to work, (because joystick axis only goes from -1 to 1, but i'll be taking the absolute value). Thrust will also be applied during this transition.

		thrustActive: When this is true, the next time the player moves, thrustForce is added.

		thrustReset: This should go true, when the joystick goes back to neutral position. This helps to determine when the thrustForce should be added.

		turnSpeed: How quickly you slow down in order to turn around and start moving the other direction

		upwardGravity: How strong the downward force to the player is WHILE THE PLAYER IS MOVING UPWARD. Refer to 'downwardGravity' for further explaination of why im doing
					   gravity this way. (instead of rigidbody gravity)

		groundSpeed: How fast you can move left and right while grounded.

		weight: How heavy the player is. The weight of your character will help determine how far you fly when an enemy hits you, it will also
				have an impact on how high you go when you jump (a heavier character will require a greater jump force to go the same height as a lighter character)
				A similar thing will happen with gravity. 
}



UltManager{

		currentCharge: The current amount of ult charge you currently have.

		chargeMultiplier: This number will have an impact in determining how much ult charge you get per attack you land, or attacks you get hit by.

		chargeRate: This is how fast the player passively gains ult charge.

		maxCharge: The maximum amount of charge you need in order to use your ultimate. It also acts as an ult charge cap, so you can gain charge once currentCharge == maxCharge

		numUltBlocks: The number of blocks that compose the ult meter. For example, maybe some special attacks require 2 bars of ult charge, while another more powerful
					  attack may require 4 ult bars to be full. This bar could also be paired with some support abilities. Some characters may only have 2 ult blocks
					  but accumulate them faster while others may have alot of blocks but take a while to charge, but more blocks allows for more support combinations etc.

}